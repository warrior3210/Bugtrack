# Project by Ananay Rampal
import MySQL.connector


from tabulate import tabulate

db = MySQL. connector. connect(
    host="localhost",
    user="root",
    password="password",
    database="bug_track"
)

cursor = db.cursor()


def detect_duplicate_bugs(new_bug_report, existing_bug_reports):
    vectorizer = TfidfVectorizer(stop_words='english')
    vectors = vectorizer.fit_transform([new_bug_report] + existing_bug_reports)

    similarity_matrix = cosine_similarity(vectors)
    similarity_scores = similarity_matrix[0][1:]

    threshold = 0.9  # You can adjust the similarity threshold
    duplicates = [existing_bug_reports[i] for i, score in enumerate(similarity_scores) if score >= threshold]

    return duplicates
def login():
    while True:
        print("1. EMPLOYEE LOGIN")
        print("2. CUSTOMER ")
        print("3. Exit")

        choice = int(input("Enter your option: "))
        
            if choice == 1:
                print("\n----WELCOME TO LOGIN BLOCK----\n")
                login_id = input("Enter your login ID: ")
                password = input("Enter your password: ")

                 query = "SELECT * FROM employee WHERE empLoginId = %s AND empPassword = %s"
                cursor.execute(query, (login_id, password))
                result = cursor.fetchone()

                if result:
                    emp_type = result[2]  # Get the employee type (Admin or Expert)
                   if emp_type == "ADMIN":
                    admin_module()
                elif emp_type == "EXPERT":
                    expert_module()
            if choice == 2:
                    customer_module()

            if choice == 3:
                 break


def advanced_bug_search():
    print("ADVANCED BUG SEARCH")
    # Allow the user to input various criteria like product, status, severity, date, etc.
    product = input("Enter product name: ")
    status = input("Enter bug status: ")
    severity = input("Enter bug severity: Critical/High/Medium/Low:")
    # ... Add more criteria as needed
    # Construct the query based on the entered criteria
    query = "SELECT * FROM bug WHERE product = %s AND bugStatus = %s AND severity = %s"
    values = (product, status, severity)
    # Execute the query and fetch results
    cursor.execute(query, values)
    results = cursor.fetchall()
    if results:
        table = tabulate(results, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", "DeviceType",
                                           "BugDesc", "BugAssignedDate", "ExpertId", "BugSolvedDate", "BugSoln",
                                           "Feedback"],
                         tablefmt="pretty")
        print(table)
    else:
        print("No bugs found with the specified criteria.")

def bug_tracking_dashboard():
    query_total_bugs = "SELECT COUNT(*) FROM bug"
    cursor.execute(query_total_bugs)
    total_bugs = cursor.fetchone()[0]

    query_open_bugs = "SELECT COUNT(*) FROM bug WHERE bugStatus = 'Open'"
    cursor.execute(query_open_bugs)
    open_bugs = cursor.fetchone()[0]

    query_resolved_bugs = "SELECT COUNT(*) FROM bug WHERE bugStatus = 'Solved'"
    cursor.execute(query_resolved_bugs)
    resolved_bugs = cursor.fetchone()[0]

    query_avg_resolution_time = "SELECT AVG(TIMESTAMPDIFF(HOUR, bugAssignedDate, bugSolvedDate)) " \
                                "FROM bug WHERE bugStatus = 'Solved'"
    cursor.execute(query_avg_resolution_time)
    avg_resolution_time = cursor.fetchone()[0]

    print("----- BUG TRACKING DASHBOARD -----")
    print("Total Bugs:", total_bugs)
    print("Open Bugs:", open_bugs)
    print("Resolved Bugs:", resolved_bugs)
    print("Average Resolution Time (hours):", avg_resolution_time)
    print("-----------------------------------")




def admin_module():
    while True:
        
            print("\n-----WELCOME TO THE ADMIN MODULE-----\n ")
            print("1. Customer Services")
            print("2. Employee Services")
            print("3. Bug Services")
            print("4. Bug Tracking Dashboard")
            print("5. Logout")

            choice = int(input("Enter your choice: "))

            if choice == 1:
                customer_services()
            elif choice == 2:
                employee_services()
            elif choice == 3:
                bug_services()
            elif choice == 4:
                bug_tracking_dashboard()
            elif choice == 5:
                break
            else:
                print("\n---Invalid choice!--- ")
        




def customer_services():
    while True:
        
            print("\n-----WELCOME TO THE CUSTOMER SERVICES.-----\n")
            print("1. View All Customers")
            print("2. Search Customers by Name")
            print("3. Search Customers by Login ID")
            print("4. Go Back")

            choice = int(input("Enter your choice: "))


            if choice == 1:
                query = "SELECT * FROM customer"
                cursor.execute(query)
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["ID", "Name", "Login ID", "Age", "Phone", "Email"],
                                     tablefmt="pretty")
                    print(table)

                else:
                    print("NO CUSTOMERS FOUND ")
            elif choice == 2:
                name = input("Enter the customer name: ")
                query = "SELECT * FROM customer WHERE custName LIKE %s"
                cursor.execute(query, ('%' + name + '%',))
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["LoginId", "Password", "Name", "Age", "Phone", "Email"],
                                     tablefmt="pretty")
                    print(table)

                else:
                    print("\nNO CUSTOMERS FOUND WITH THE NAME:", name )


            elif choice == 3:
                login_id = input("Enter the customer login ID: ")
                query = "SELECT * FROM customer WHERE custLoginId = %s"
                cursor.execute(query, (login_id,))
                result = cursor.fetchall()

                if result:
                    table = tabulate(result, headers=["LoginId", "Password", "Name", "Age", "Phone", "Email"],
                                     tablefmt="pretty")
                    print(table)

                else:
                    print("\nNO CUSTOMER FOUND WITH THIS LOGIN ID:", login_id )

            elif choice == 4:
                break
            else:
                print("Invalid choice!")


def employee_services():
    while True:
    
            print("\n-----WELCOME TO THE EMPLOYEE SERVICES-----\n")
            print("1. Add New Employee")
            print("2. View All Employees")
            print("3. Search Employees by Name")
            print("4. Search Employees by Login ID")
            print("5. Search Employees by Type")
            print("6. Activate or Deactivate Employee")
            print("7. Change Employee Password")
            print("8. Go Back\n")



           choice = int(input("Enter your choice: "))


           if choice == 1:
                print("/n---ENTER THE DETAILS---\n")
                emp_login_id = input("Enter the employee login ID: ")
                emp_password = input("Enter the employee password: ")
                emp_type = input("Enter the employee type (ADMIN or EXPERT): ")
                emp_name = input("Enter the employee name: ")
                emp_phone = input("Enter the employee phone number: ")
                emp_email = input("Enter the employee email: ")

                query = "INSERT INTO employee (empLoginId, empPassword, empType, empName, empPhone, empEmail) " \
                        "VALUES (%s, %s, %s, %s, %s, %s)"
                values = (emp_login_id, emp_password, emp_type, emp_name, emp_phone, emp_email)
                cursor.execute(query, values)
                db.commit()

                print("EMPLOYEE HAS BEEN ADDED SUCCESSFULLY")


          elif choice == 2:
                query = "SELECT * FROM employee"
                cursor.execute(query)
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["empLoginId", "Password", "Type", "Name", "Phone", "Email","Status"],
                                     tablefmt="pretty")
                    print(table)

                else:
                    print("\nNO EMPLOYEE FOUND ")

            elif choice == 3:
                name = input("Enter the employee name: ")
                query = "SELECT * FROM employee WHERE empName LIKE %s"
                cursor.execute(query, ('%' + name + '%',))
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["empLoginId", "empPassword", "Type", "empName", "Phone", "Email",
                                     "Status"],   tablefmt="pretty" )
                    print(table)

                else:
                    print("\nNO EMPLOYEE FOUND WITH THE NAME:", name )


           elif choice == 4:
                login_id = input("Enter the employee login ID: ")
                query = "SELECT * FROM employee WHERE empLoginId = %s"
                cursor.execute(query, (login_id,))
                result = cursor.fetchall()

                if result:
                    table = tabulate(result, headers=["empLoginId", "empPassword", "Type", "empName", "Phone", "Email",
                                                      "Status"],   tablefmt="pretty")
                    print(table)
                else:
                    print("\nNO EMPLOYEE FOUND WITH LoginId:", login_id )


            elif choice == 5:
                emp_type = input("Enter the employee type (Admin or Expert): ")
                query = "SELECT * FROM employee WHERE empType = %s"
                cursor.execute(query, (emp_type,))
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["empLoginId", "empPassword", "Type", "empName", "Phone", "Email",
                                                       "Status"],   tablefmt="pretty")
                    print(table)
                else:
                    print("\nNO EMPLOYEES FOUND UNDER THE TYPE:", emp_type )


            elif choice == 6:
                login_id = input("Enter the employee login ID: ")
                status = input("Enter the new status (ACTIVE or INACTIVE): ")
                query = "UPDATE employee SET empStatus = %s WHERE empLoginId = %s"
                cursor.execute(query, (status, login_id))
                db.commit()

                print("\nEMPLOYEE STATUS SUCCESSFULLY UPDATED FOR LoginId:", login_id)


            elif choice == 7:
                login_id = input("Enter the employee login ID: ")
                new_password = input("Enter the new password: ")
                query = "UPDATE employee SET empPassword = %s WHERE empLoginId = %s"
                cursor.execute(query, (new_password, login_id))
                db.commit()
                print("EMPLOYEE PASSWORD CHANGED SUCCESSFULLY FOR LoginId:",login_id )
            elif choice == 8:
                break
            else:
                print("Invalid choice!")



# Function to manage bug services in the admin module
def bug_services():
    while True:
        try:
            print("\nWELCOME TO THE BUG SERVICES\n")
            print("1. View All Bugs")
            print("2. Search Bugs by ID")
            print("3. Search Bugs by Status")
            print("4. Search Bugs by Customer Login ID")
            print("5. Assign Bug to Expert")
            print("6. Go Back\n")

            choice = int(input("Enter your choice: "))

            if choice == 1:
                query = "SELECT * FROM bug"
                cursor.execute(query)
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=[ "BugId","BugEntered Date", "CustomerId", "BugStatus", 
                                                        "DeviceType","BugDesc", "BugAssignedDate","ExpertId",
                                                        "BugSolvedDate","BugSoln","Feedback"],
                                     tablefmt="pretty")
                    print(table)
                else:
                    print("NO BUGS FOUND")

            elif choice == 2:
                bug_id = int(input("Enter the bug ID: "))
                query = "SELECT * FROM bug WHERE bugId = %s"
                cursor.execute(query, (bug_id,))
                result = cursor.fetchall()

                if result:
                    table = tabulate(result, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", 
                                                      "DeviceType","BugDesc", "BugAssignedDate", "ExpertId", 
                                                      "BugSolvedDate", "BugSoln", "Feedback"],
                                     tablefmt="pretty")
                    print(table)
                # the table will be printed 
                else:
                    print("NO BUG FOUND FOR BugId:", bug_id )
         elif choice == 3:
                status = input("Enter the bug status: ")
                query = "SELECT * FROM bug WHERE bugStatus = %s"
                cursor.execute(query, (status,))
                results = cursor.fetchall()
                if results:
                    table = tabulate(results, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", 
                                                       "DeviceType","BugDesc", "BugAssignedDate", "ExpertId", 
                                                       "BugSolvedDate", "BugSoln","Feedback"],
                                     tablefmt="pretty")
                    print(table)
                else:
                    print("NO BUGS FOUND WHERE STATUS:",status )
            elif choice == 4:
                login_id = input("Enter the customer login ID: ")
                query = "SELECT * FROM bug WHERE custLoginId = %s"
                cursor.execute(query, (login_id,))
                results = cursor.fetchall()

                if results:
                    table = tabulate(results, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus",
                                                       "DeviceType", "BugDesc", "BugAssignedDate", "ExpertId",
                                                       "BugSolvedDate", "BugSoln","Feedback"],
                                     tablefmt="pretty")
                    print(table)
                else:
                    print("\nNO BUGS FOUND FOR CustomerId:", login_id)

            elif choice == 5:
                bug_id = int(input("Enter the bug ID: "))
                expert_login_id = input("Enter the expert login ID: ")
                query = "UPDATE bug SET expertLoginId = %s, bugStatus = 'Assigned', expertAssignedDate = NOW() " \
                        "WHERE bugId = %s"
                cursor.execute(query, (expert_login_id, bug_id))
                db.commit()

                print("\nBUG ASSIGNED TO THE EXPERT(expertId:)",expert_login_id, "SUCCESSFULLY")
            elif choice == 6:
                break
            else:
                print("Invalid Choice")

# Expert module functions
def expert_module():
    while True:
        print("\nWELCOME TO THE EXPERT MODULE\n")
        print("1. View Assigned Bugs")
        print("2. Filter Assigned Bugs by Status")
        print("3. Solve Bug")
        print("4. Change Password")
        print("5. Logout\n")
        # we will input the values 
        choice = int(input("Enter your choice: "))

        if choice == 1:
            expert_login_id = input("Enter your login ID: ")
            query = "SELECT * FROM bug WHERE expertLoginId = %s"
            cursor.execute(query, (expert_login_id,))
            results = cursor.fetchall()
            if results:
                table = tabulate(results, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", 
                                                   "DeviceType","BugDesc", "BugAssignedDate", "ExpertId", 
                                                   "BugSolvedDate", "BugSoln","Feedback"],
                                 tablefmt="pretty")
                print(table)
            else:
                print("NO ASSIGNED BUGS FOUND FOR ID:", expert_login_id )

        elif choice == 2:
            expert_login_id = input("Enter your login ID: ")
            status = input("Enter the bug status: ")
            query = "SELECT * FROM bug WHERE expertLoginId = %s AND bugStatus = %s"
            cursor.execute(query, (expert_login_id, status))
            results = cursor.fetchall()
            if results:
                table = tabulate(results, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus",
                                                   "DeviceType","BugDesc", "BugAssignedDate", "ExpertId", 
                                                   "BugSolvedDate", "BugSoln","Feedback"],
                                 tablefmt="pretty")
                print(table)
            else:
                print("NO BUGS FOUND WITH SPECIFIED STATUS:",status )

        elif choice == 3:
            bug_id = int(input("Enter the bug ID: "))
            query = "SELECT * FROM bug WHERE bugId = %s"
            cursor.execute(query, (bug_id,))
            result = cursor.fetchall()
            if result:
                table = tabulate(result, headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus",
                                                  "DeviceType","BugDesc", "BugAssignedDate", "ExpertId",
                                                  "BugSolvedDate", "BugSoln", "Feedback"],
                                 tablefmt="pretty")
                print(table)
                solution = input("Enter the bug solution: ")
                query = "UPDATE bug SET bugStatus = 'Solved', bugSolvedDate = NOW(), solution = %s WHERE bugId = %s"
                cursor.execute(query, (solution, bug_id))
                db.commit()

                print("BUG SOLUTION SUBMITTED SUCCESSFULLY ")

        elif choice == 4:
            expert_login_id = input("Enter your login ID: ")
            new_password = input("Enter the new password: ")
            query = "UPDATE employee SET empPassword = %s WHERE empLoginId = %s"
            cursor.execute(query, (new_password, expert_login_id))
            db.commit()
            print("PASSWORD CHANGED SUCCESSFULLY")
        elif choice == 5:
            break
        else:
            print("Invalid choice!")
# Customer module functions
def customer_module():
    while True:
        print("\nWELCOME TO THE CUSTOMER MODULE\n")
        print("1. NEW USER ")
        print("2. EXISTING USER ")
        print("3. EXIT")

        choice = int(input("Enter your option: "))
        if choice == 1:
                print( " WELCOME TO THE BUG TRACKING SYSTEM ")
                print( " PLEASE CREATE AN ACCOUNT TO ACCESS THE SYSTEM\n\n ")
                print( "---SOME INSTRUCTIONS FOR CREATING AN ACCOUNT---")
                print( ">>THE LOGIN ID SHOULD BE OF THE FORMAT CU1XXX where CU2 is the code for customers.<<")
                print(">>AGE AND PHONE NUMBER SHOULD BE IN NUMBERS ONLY .<<\n")

                    cust_login_id = input("Enter the customer login ID:  ")
                    query = "SELECT * FROM customer WHERE custLoginId = %s"
                    cursor.execute(query, (cust_login_id,))
                    result = cursor.fetchone()
                    if result:
                        print("Login ID is already taken. Please choose a different one.")
                    else:
                        pass

                cust_password = input("Enter the customer password: ")
                cust_name = input("Enter the customer name: ")
                cust_age = int(input("Enter the customer age: "))
                cust_phone = input("Enter the customer phone number: ")
                cust_email = input("Enter the customer email: ")

                query = "INSERT INTO customer (custLoginId, custPassword, custName, custAge, custPhone, custEmail) " \
                        "VALUES (%s, %s, %s, %s, %s, %s)"
                values = (cust_login_id, cust_password, cust_name, cust_age, cust_phone, cust_email)
                cursor.execute(query, values)
                db.commit()

                print("\nYOUR ACCOUNT HAS BEEN CREATED SUCCESSFULLY. TAKE FULL USE OF THE FACILITIES AVAILABLE TO YOU")

        if choice == 2:
            login_id = input("Enter your login ID: ")
            password = input("Enter your password: ")
            query = "SELECT * FROM employee WHERE empLoginId = %s AND empPassword = %s"
            cursor.execute(query, (login_id, password))
            result = cursor.fetchone()

            if result:
                customer_module()
            else:
                print("Invalid login credentials!")

            print("WELCOME BACK TO THE SYSTEM ")
            print("WELCOME BACK TO THE SYSTEM ")
            while True:
                print("\nWELCOME TO THE CUSTOMER MODULE")
                print("1. Update Account")
                print("2. Post New Bug")
                print("3. View All Bugs")
                print("4. Search Bugs based on status")
                print("5. View Bug Solution")
                print("6. Feedback ")
                print("7. Change Password")
                print("8. Log Out")

                choice = int(input("Enter your choice: "))
                
                if choice == 1:
                    cust_name = input("Enter the updated customer name: ")
                    cust_age = int(input("Enter the updated customer age: "))
                    cust_phone = input("Enter the updated customer phone number: ")
                    cust_email = input("Enter the updated customer email: ")
                    query = "UPDATE customer SET custName = %s, custAge = %s, custPhone = %s, custEmail = %s " \
                        "WHERE custLoginId = %s"
                    values = (cust_name, cust_age, cust_phone, cust_email, cust_login_id)
                    cursor.execute(query, values)
                    db.commit()
                    print(" YOUR ACCOUNT HAS BEEN UPDATES SUCCESSFULLY.")

                elif choice == 2:
                    # for posting the bug 
                    cust_login_id = input("Enter your login ID: ")
                    product_name = input("Enter the product name: ")
                    bug_desc = input("Enter the bug description: ")
                    query = "INSERT INTO bug (custLoginId, productName, bugDesc) VALUES (%s, %s, %s)"
                    values = (cust_login_id, product_name, bug_desc)
                    cursor.execute(query, values)
                    db.commit()
                    # commit completed
                    print("YOUR BUG HAS BEEN POSTED SUCCESSFULLY.")

                elif choice == 3:
                    cust_login_id = input("Enter your login ID: ")
                    query = "SELECT * FROM bug WHERE custLoginId = %s"
                    cursor.execute(query,(cust_login_id,)  )
                    results = cursor.fetchall()

                    if results:
                        table = tabulate(results,
                                         headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", 
                                                  "DeviceType","BugDesc", "BugAssignedDate", "ExpertId",
                                                  "BugSolvedDate", "BugSoln","Feedback"],
                                         tablefmt="pretty")
                        print(table)
                    else:
                        print("No bugs found.")
                elif choice == 4:
                    cust_login_id = input("Enter your login ID: ")
                    bug_status = input("Enter the bug status: ")
                    query = "SELECT * FROM bug WHERE bugStatus = %s"
                    cursor.execute(query, (cust_login_id ,bug_status,))
                    results = cursor.fetchall()

                    if results:
                        table = tabulate(results,
                                         headers=["BugId", "BugEntered Date", "CustomerId", "BugStatus", 
                                                  "DeviceType","BugDesc", "BugAssignedDate", "ExpertId",
                                                  "BugSolvedDate", "BugSoln","Feedback"],
                                         tablefmt="pretty")
                        print(table)
                    else:
                        print("No bugs found with the specified status.")

                elif choice == 5:
                    bug_id = int(input("Enter the bug ID: "))
                    query = "SELECT solution FROM bug WHERE bugId = %s"
                    cursor.execute(query, (bug_id,))
                    result = cursor.fetchone()
# to print the bug solution
                    if result:
                        print("Bug Solution:")
                        print(result[0])
                    else:
                        print("Bug not found")

                elif choice == 6:

                    bug_id = int(input("Enter the bug ID: "))
                    query = "SELECT solution FROM bug WHERE bugId = %s"
                    cursor.execute(query, (bug_id,))
                    result = cursor.fetchone()

                    if result:
                        print("Bug Solution:")
                        print(result[0])
                        feedback = input("Provide your feedback to the solution: ")


                        query = "UPDATE bug SET feedback = %s WHERE bugId = %s"
                        cursor.execute(query, (feedback, bug_id))
                        db.commit()

                        print("Feedback submitted successfully.")
                    else:
                        print("Bug not found.")
                elif choice == 7:

                    login_id = input("Enter your login ID: ")
                    current_password = input("Enter your current password: ")
                    new_password = input("Enter your new password: ")
                    query = "SELECT custLoginId FROM customer WHERE custLoginId = %s AND custPassword = %s"
                    cursor.execute(query, (login_id, current_password))
                    result = cursor.fetchone()

                    if result:
                        query = "UPDATE customer SET custPassword = %s WHERE custLoginId = %s"
                        cursor.execute(query, (new_password, login_id))
                        db.commit()
                        print("Password changed successfully.")
                    else:
                        print("Invalid login ID or current password.")
                elif choice == 8:
                    break
                else:
                    print("Invalid choice!")

        if choice == 3:
            break

def perform_analysis(query, analysis_type, headers):
    cursor.execute(query)
    results = cursor.fetchall()

    if results:
        print("-----", analysis_type, "ANALYSIS -----")
        table = tabulate(results, headers=headers, tablefmt="pretty")
        print(table)
    else:
        print("No data available for", analysis_type, "analysis.")

def customer_analysis():
    query = "SELECT custName, COUNT(bugId) AS TotalBugsPosted FROM customer LEFT JOIN bug " \
            "ON customer.custLoginId = bug.custLoginId GROUP BY customer.custLoginId"
    headers = ["Customer Name", "Total Bugs Posted"]
    perform_analysis(query, "CUSTOMER", headers)

def expert_analysis():
    query = "SELECT empName, COUNT(bugId) AS TotalBugsAssigned FROM employee LEFT JOIN bug " \
            "ON employee.empLoginId = bug.expertLoginId WHERE empType = 'EXPERT' GROUP BY employee.empLoginId"
    headers = ["Expert Name", "Total Bugs Assigned"]
    perform_analysis(query, "EXPERT", headers)

def perform_analysis_customer_expert():
    while True:
        print("\n----- ANALYSIS MENU -----\n")
        print("1. Customer Analysis")
        print("2. Expert Analysis")
        print("3. Go Back")
        choice = int(input("Enter your choice: "))
        if choice == 1:
            customer_analysis()
        elif choice == 2:
            expert_analysis()
        elif choice == 3:
            break
        else:
            print("\n---Invalid choice!---")




# Main program flow
while True:
    print("WELCOME TO THE BUG TRACKING SYSTEM")
    print("1. Login")
    print("2. Exit")

    option = int(input("Enter your option: "))

    if option == 1:
        login()
    elif option == 2:
        break
    else:
        print("Invalid option!")

import MySQL.connector
import pandas as pd
import matplotlib.pyplot as plt

# ... (existing code)

def analysis_module():
    while True:
        print("\n----- ANALYSIS MODULE -----\n")
        print("1. Bug Status Analysis Over Time")
        print("2. Bug Severity Analysis")
        print("3. Bug Assignment Time Analysis")
        print("4. Bug Resolution Time Analysis")
        print("5. Customer Feedback Analysis")
        print("6. Expert Performance Analysis")
        print("7. Bug Categories Analysis")
        print("8. Customer Bug Posting Frequency")
        print("9. Bug Trends by Product")
        print("10. Bug Trends by Device Type")
        print("11. Bug Patterns Analysis")
        print("12. Bug Source Analysis")
        print("13. Employee Activity Analysis")
        print("14. Bug Interaction Analysis")
        print("15. Bug Distribution by Customer Type")
        print("16. Bug Impact Analysis")
        print("17. Bug Trends Over Versions")
        print("18. Bug Source Code Analysis")
        print("19. Employee Workload Analysis")
        print("20. Bug Resolution Pattern")
        print("21. Go Back")

        choice = int(input("Enter your choice: "))

        if choice == 1:
            # Bug Status Analysis Over Time
            # Query, convert to DataFrame, and plot the data
            # ...

        elif choice == 2:
            # Bug Severity Analysis
            # Query, convert to DataFrame, and plot the data
            # ...

        elif choice == 3:
            # Bug Assignment Time Analysis
            # Query, calculate average time, and display the result
            # ...

        elif choice == 4:
            # Bug Resolution Time Analysis
            # Query, calculate average time, and display the result
            # ...

        # ... (add more cases for other analysis features)

        elif choice == 21:
            break
        else:
            print("Invalid choice!")

# Main program flow
while True:
    print("WELCOME TO THE BUG TRACKING SYSTEM")
    print("1. Login")
    print("2. Exit")

    option = int(input("Enter your option: "))

    if option == 1:
        login()
    elif option == 2:
        break
    else:
        print("Invalid option!")



        

          


        
        


               
            
             

                





      






















# Close the database connection
db.close()
